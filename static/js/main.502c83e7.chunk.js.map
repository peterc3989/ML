{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js"],"names":["shake","keyframes","StyledLink","styled","Link","StyledText","div","StyledAppBar","AppBar","useStyles","makeStyles","theme","toolbar","marginLeft","marginRight","title","flexGrow","fontSize","fontFamily","textTransform","color","button","Header","classes","className","root","position","Toolbar","Typography","variant","href","form","display","flexDirection","lineHeight","boxSizing","borderWidth","borderColor","border","alignItems","justifyContent","formItem","marginBottom","formInput","alignSelf","padding","outline","borderRadius","background","formLabel","fontWeight","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","Container","FormContainer","DataContainer","StyledData","StyledData2","class_names","App","useState","results","setResults","imageURL","setImageURL","model","setModel","imageRef","useRef","inputRef","prediction","setPrediction","useReducer","state","event","appState","dispatch","actionButton","action","a","jsonUpload","document","getElementById","weightsUpload","tf","browserFiles","files","summary","text","current","click","resized","fromPixels","resizeBilinear","predictOnBatch","reshape","temp","argMax","print","Array","from","dataSync","html","for","type","id","name","src","alt","ref","class","accept","capture","onChange","target","length","url","URL","createObjectURL","map","probability","index","key","toFixed","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.502c83e7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst shake = keyframes`\r\n  0% { transform: rotate(0deg); }\r\n   25% { transform: rotate(9deg); }\r\n   50% { transform: rotate(0deg); }\r\n   75% { transform: rotate(-9deg); }\r\n  100% { transform: rotate(0deg); }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  && {\r\n    margin-left: 3%;\r\n    color: white;\r\n    &:hover {\r\n      animation: ${shake} 0.5s linear;\r\n    }\r\n  }\r\n`;\r\nconst StyledText = styled.div`\r\n  && {\r\n    color: white;\r\n    transition: 0.6s;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n    font-family: \"Kalam\", cursive;\r\n    font-size: 2rem;\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\n\r\nconst StyledAppBar = styled(AppBar)`\r\n  && {\r\n    background: black;\r\n    transition: 0.6s;\r\n  }\r\n`;\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbar: {\r\n    marginLeft: \"10%\",\r\n    marginRight: \"8%\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontSize: \"2rem\",\r\n    fontFamily: \"'Kalam', cursive\",\r\n    textTransform: \"uppercase\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  button: {\r\n    marginLeft: \"3%\",\r\n    fontSize: \"2rem\",\r\n    color: \"white\",\r\n    textTransform: \"none\",\r\n  },\r\n}));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <StyledAppBar position=\"static\">\r\n        <Toolbar color=\"secondary\" className={classes.toolbar}>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <StyledText>Peter Chen</StyledText>\r\n          </Typography>\r\n          <StyledLink href=\"https://github.com/peterc3989\">\r\n            <GitHubIcon />\r\n          </StyledLink>\r\n          <StyledLink href=\"https://www.linkedin.com/in/peterc3989/\">\r\n            <LinkedInIcon />\r\n          </StyledLink>\r\n        </Toolbar>\r\n      </StyledAppBar>\r\n    </div>\r\n  );\r\n}","import React, { useState, useRef, useReducer } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Header from \"./Header.js\";\nimport styled, { keyframes } from \"styled-components\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst useStyles = makeStyles({\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    lineHeight: 1.5,\n    boxSizing: \"border-box\",\n    fontSize: \"16px\",\n    marginLeft: \"40%\",\n    marginRight: \"40%\",\n    borderWidth: \"1\",\n    borderColor: \"#e66465\",\n    border: \"solid\",\n\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  formItem: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginBottom: 2,\n  },\n  formInput: {\n    alignSelf: \"flex-start\",\n\n    padding: \"0.8em\",\n    fontSize: \"0.9em\",\n    fontFamily: '\"Source Sans Pro\", sans-serif',\n\n    outline: \"none\",\n    border: \"1px solid #dddddd\",\n    borderRadius: \"4px\",\n    background: \"#f9f9f9\",\n  },\n  formLabel: {\n    fontWeight: 600,\n    padding: \"10px 0\",\n    alignSelf: \"flex-start\",\n  },\n  button: {\n    fontSize: \"20px\",\n    color: \"white\",\n    textTransform: \"none\",\n  },\n});\n\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\" } },\n    loadingModel: { on: { next: \"modelReady\" } },\n    modelReady: { on: { next: \"imageReady\" } },\n    imageReady: { on: { next: \"identifying\" }, showImage: true },\n    identifying: { on: { next: \"complete\" } },\n    complete: {\n      on: { next: \"modelReady\" },\n      showImage: true,\n      showResults: true,\n    },\n  },\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  padding: 30px;\n`;\nconst FormContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  text-align: center;\n  align-items: center;\n  padding: 30px;\n  margin: 30px;\n`;\nconst DataContainer = styled.div`\n  display: flex;\n  flex-basis: 20%;\n  flex-direction: row;\n  flex-wrap: wrap;\n  text-align: center;\n  align-items: center;\n  padding: 10px;\n  margin: 5px;\n  margin-left:25%;\n  margin-right:25%;\n`;\nconst StyledData = styled.div`\n  width: 300px;\n  box-sizing: border-box;\n  border: solid 1px white;\n  background: black;\n  color: white;\n  font-size: 24px;\n  margin: auto;\n  padding: 10px;\n`;\nconst StyledData2 = styled.div`\n  width: 300px;\n  box-sizing: border-box;\n  border: solid 1px white;\n  background: #f50057;\n  color: white;\n  font-size: 24px;\n  margin: auto;\n  padding: 10px;\n`;\nconst class_names = [\n  \"Airplane\",\n  \"Automobile\",\n  \"Bird\",\n  \"Cat\",\n  \"Deer\",\n  \"Dog\",\n  \"Frog\",\n  \"Horse\",\n  \"Ship\",\n  \"Truck\",\n];\n\nfunction App() {\n  const classes = useStyles();\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n  const [prediction, setPrediction] = useState([]);\n\n  const reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const jsonUpload = document.getElementById(\"json-upload\");\n    const weightsUpload = document.getElementById(\"weights-upload\");\n\n    const model = await tf.loadLayersModel(\n      tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]])\n    );\n    model.summary();\n    setModel(model);\n    next();\n  };\n\n  const identify = async () => {\n    next();\n    //console.log(imageRef.current)\n    const resized = tf.browser\n      .fromPixels(imageRef.current)\n      .resizeBilinear([32, 32]);\n    const results = await model.predictOnBatch(resized.reshape([1, 32, 32, 3]));\n    const temp = results.argMax(1);\n    results.argMax(1).print();\n    setResults(Array.from(results.dataSync()));\n    setPrediction(temp.dataSync()[0]);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = (event) => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: { action: loadModel, text: \"Load Model\" },\n    loadingModel: { text: \"Loading Model...\" },\n    modelReady: { action: upload, text: \"Upload Image\" },\n    imageReady: { action: identify, text: \"Identify\" },\n    identifying: { text: \"Identifying...\" },\n    complete: { action: reset, text: \"Reset\" },\n  };\n\n  const { showImage, showResults } = machine.states[appState];\n\n  const html = (\n    <div>\n      <label for=\"avatar\">Upload Model</label>\n      <input type=\"file\" id=\"json-upload\" name=\"json-upload\"></input>\n      <label for=\"avatar\">Upload Weights</label>\n      <input type=\"file\" id=\"weights-upload\" name=\"weights-upload\"></input>\n    </div>\n  );\n\n  return (\n    <div>\n      <Header></Header>\n      <Container>\n        <FormContainer>{html}</FormContainer>\n        {showImage && (\n          <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />\n        )}\n        <input\n          type=\"file\"\n          class=\"hide\"\n          accept=\"image/*\"\n          capture=\"camera\"\n          onChange={handleUpload}\n          ref={inputRef}\n        />\n        {showResults && (\n          <Container>\n            <StyledData2>{\"Prediction: \" + class_names[prediction]}</StyledData2>\n            <DataContainer>\n              {results.map((probability, index) => (\n                <StyledData key={probability}>{`${\n                  class_names[index]\n                }: ${probability.toFixed(2)}`}</StyledData>\n              ))}\n            </DataContainer>\n          </Container>\n        )}\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={actionButton[appState].action || (() => {})}\n        >\n          {actionButton[appState].text}\n        </Button>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}