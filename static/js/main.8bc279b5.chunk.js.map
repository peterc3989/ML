{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","form","display","flexDirection","lineHeight","boxSizing","fontSize","marginLeft","marginRight","borderWidth","borderColor","border","alignItems","justifyContent","formItem","marginBottom","formInput","alignSelf","padding","fontFamily","outline","borderRadius","background","formLabel","fontWeight","button","color","textTransform","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","App","classes","useState","results","setResults","imageURL","setImageURL","model","setModel","imageRef","useRef","inputRef","useReducer","state","event","appState","dispatch","actionButton","action","a","mobilenet","text","current","click","classify","src","alt","ref","type","accept","capture","onChange","target","files","length","url","URL","createObjectURL","map","className","probability","key","toFixed","Button","variant","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8bc279b5.chunk.js","sourcesContent":["import React, { useState, useRef, useReducer } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  form: {\n    display:'flex',\n    flexDirection: 'column',\n    lineHeight: 1.5,\n    boxSizing: 'border-box',\n    fontSize: '16px',\n    marginLeft:'40%',\n    marginRight:'40%',\n    borderWidth:'1',\n    borderColor: '#e66465',\n    border: 'solid',\n    \n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  formItem: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: 2,\n  },\n  formInput: {\n    alignSelf: 'flex-start',\n\n    padding: '0.8em',\n    fontSize: '0.9em',\n    fontFamily: '\"Source Sans Pro\", sans-serif',\n\n    outline: 'none',\n    border: '1px solid #dddddd',\n    borderRadius: '4px',\n    background: '#f9f9f9',\n  },\n  formLabel: {\n    fontWeight: 600,\n    padding: '10px 0',\n    alignSelf: 'flex-start',\n  },\n  button: {\n    fontSize: '20px',\n    color: 'white',\n    textTransform: 'none',\n  },\n});\n\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\" } },\n    loadingModel: { on: { next: \"modelReady\" } },\n    modelReady: { on: { next: \"imageReady\" } },\n    imageReady: { on: { next: \"identifying\" }, showImage: true },\n    identifying: { on: { next: \"complete\" } },\n    complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\n  }\n};\n\nfunction App() {\n  const classes = useStyles();\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: { action: loadModel, text: \"Load Model\" },\n    loadingModel: { text: \"Loading Model...\" },\n    modelReady: { action: upload, text: \"Upload Image\" },\n    imageReady: { action: identify, text: \"Identify\" },\n    identifying: { text: \"Identifying...\" },\n    complete: { action: reset, text: \"Reset\" }\n  };\n\n  const { showImage, showResults } = machine.states[appState];\n\n  return (\n    <div>\n      {showImage && <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />}\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"camera\"\n        onChange={handleUpload}\n        ref={inputRef}\n      />\n      {showResults && (\n        <ul>\n          {results.map(({ className, probability }) => (\n            <li key={className}>{`${className}: %${(probability * 100).toFixed(\n              2\n            )}`}</li>\n          ))}\n        </ul>\n      )}\n      <Button className={classes.button} variant=\"contained\" color=\"secondary\" onClick={actionButton[appState].action || (() => {})}>\n        {actionButton[appState].text}\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}